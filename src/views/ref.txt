<template>
    <div class="trans">
        <paystack
        :amount="amount"
        :email="email"
        :paystackkey="paystackkey"
        :reference="reference"
        :callback="callback"
        :close="close"
        :embed="false"
    >
       <i class="fas fa-money-bill-alt"></i>
       Make Payment
    </paystack>
    <div class="close-msg" v-if="closedMessage"><span>{{ closedMessage }}</span><span class="remove-btn" @click="closeAlert">&times;</span></div>
    </div>
</template>
 
<script type="text/javascript">
import axios from 'axios';
import paystack from 'vue-paystack';

export default {
    props: ['deliveryData', 'deliveryPrice'],
    components: {
        paystack
    },
    computed: {
      reference(){
        let text = "";
        let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
 
        for( let i=0; i < 10; i++ )
          text += possible.charAt(Math.floor(Math.random() * possible.length));
 
        return text;
      },
      user(){
          return this.$store.getters.user
      },
      totalPrice(){
            return this.$store.getters.cartTotal
        },
    },
    data(){
        const user = JSON.parse(localStorage.getItem("user"))
        const totalPrice = this.$store.getters.cartTotal
        return{
          paystackkey: "pk_test_001f2cc33e6496187212e73fc850e9a98a686fd9", //paystack public key
          email: user.email, // Customer email
          amount: (this.deliveryPrice + totalPrice) * 100, // in kobo
          closedMessage: ''
        }
    },
    methods: {
      callback: function(response){
        const user = JSON.parse(localStorage.getItem("user")) // getting user from localStorage
        const totalPrice = this.$store.getters.cartTotal
        axios.post('/api/transaction/save', {
            firstname: user.firstname,
            lastname: user.lastname,
            email: user.email,
            phoneNumber: user.phoneNumber,
            address: this.deliveryData.customerInfo.streetAddress,
            reference: response.reference,
            trxRef: response.trxRef,
            transaction: response.transaction,
            trans: response.trans,
            status: response.status,
            message: response.message,
            buyer: user._id,
            products: this.$store.getters.cart
        })
        .then(res => {
            axios.post('/api/order/save', {
                products: this.$store.getters.cart,
                transactionID: res.data.transaction._id,
                amount: this.deliveryPrice + totalPrice,
                address: this.deliveryData.customerInfo.streetAddress,
                state: this.deliveryData.customerInfo.city,
                LGA: this.deliveryData.customerInfo.LGA,
                buyer: user._id
            })
            .then(res => console.log(res))
            .catch(err => console.log(err))
        })

        this.$router.push('/checkout/success')
      },
      close: function(){
          this.closedMessage = "Transaction ended"
      },
      closeAlert() {
          this.closedMessage = ''
      }
    }
}
</script>

<style scoped>
    button {
        padding: 10px;
        background: #27cb36;
        color: #fff;
        font-weight: bold;
        border: none;
        /* margin: 10px 0; */
        cursor: pointer;
        font-family: inherit;
        border-radius: 5px;
    }

    .trans {
        text-align: center;
        padding-top: 30px;
    }

    .close-msg {
        position: fixed;
        width: 200px;
        /* text-align: center; */
        display: flex;
        justify-content: space-between;
        padding: 10px;
        background: #27cb36;
        color: #fff;
        left:  10px;
        top: 200px;
    }

    .remove-btn {
        cursor: pointer;
    }

    @media(max-width: 500px) {
        .close-msg {
            display: none;
        }
    }
</style>