<template>
<div>
    <Navbar/>

    <!-- <PlayerSelectBar/> -->
    <div class="pickteam">
        <section id="breadcrumbs" class="breadcrumbs  m-0" style="padding:100px 0 0 !important;">
            <div class="container">
                <div class="about-holder">
                    <h2 class="about-text" data-aos="fade-down"  data-aos-delay="300">Select Players</h2>
                </div>
            </div>
        </section>
        <div class="container-fluid my-5">
            <div class="container">
            <div class="error-message alert alert-danger col-12 text-center" v-if="error">
                <p class="text-center text-uppercase">{{error}}</p>
                <!-- <span class="fa fas-book close-message" @click="closeError">X</span> -->
                <i class="fas fa-window-close close-message" @click="closeError"></i>
            </div>
            <div class="error-message alert alert-danger col-12 text-center" v-if="playerError" @click="playerError = ''" title="close">
                <p  class="text-center text-uppercase">{{ playerError }}</p>
            </div>
            </div>

            <div class="row">
                <div class="col-md-4 text-center">
                    <h4 class="formation-text text-uppercase" style="color:#05d88e">Choose your formation</h4>
                    <div class="select-form d-flex my-3" >
                        <input type="number" placeholder="Defenders" :disabled="formations.disabled" class="form-control shadow-none" v-model="formations.defender.amount" @keyup.enter="generateFormation">
                        <input type="number" placeholder="Midfielders" :disabled="formations.disabled" class="form-control shadow-none" v-model="formations.midfielders.amount" @keyup.enter="generateFormation">
                        <input type="number" placeholder="Attackers" :disabled="formations.disabled" class="form-control shadow-none" v-model="formations.attackers.amount" @keyup.enter="generateFormation">
                        
                    </div>
                    <input type="submit" :disabled="formations.disabled" class="btn submit-formation my-3 me-2" value="Generate Formation" @click="generateFormation">
                    <input v-if="buildField == true" type="submit" class="btn submit-formation my-3" value="Edit Formation" @click="editFormation">
                <p v-if="buildField == true" class="text-center text-uppercase hidden-appear-text" style="color:#16b37c">
                    Click on image icons to select players for your team
                </p>
                <div v-if="buildField">
                    <div class="player-select-holder"> 
                        <div style="justify-content: left" class="position-holder">
                            <b>Position:</b> <select v-model="selectedPosition" class="select-position" @change="showPlayers(selectedPosition)"> 
                                <option value="all">All</option>
                                <option value="gk">Goalkeepers</option>
                                <option value="def">Defenders</option>
                                <option value="mid">Midfielders</option>
                                <option value="fwd">Forwards</option>
                            </select>
                        </div>
                        <input type="search" placeholder="Search" class="search-form form-control shadow-none" v-model="search" @keyup="searchPlayers">
                        <div class="player-list" v-for="player in unselectedplayers" :key="player.id"
                        :class="!selectedPlayers.defender.players.includes(player) && !selectedPlayers.midfielders.players.includes(player) && !selectedPlayers.attackers.players.includes(player) ? 'unpicked' : 'picked'">
                            <span>{{player.firstname}} {{ player.lastname }}</span>
                            <span @click="selectPlayer(player)" >
                                <i class="fa fa-plus"></i>
                            </span>
                        </div>
                        
                    </div>
                </div>
                <button v-if="buildField == true" class="btn text-uppercase submit-team-button py-2 mb-3 px-3 mt-2" style="background-color:#05d88e; color:#fff;">
                    <b>SAVE TEAM</b>
                </button>
                <!-- <div>
                    {{selectedPlayers}}
                </div> -->
                <!-- {{  formations }} -->
                </div>

                <div class="col-md-8">
                    <div class="field">
                        <div v-if="buildField == true">
                            <div class="row">
                                <div class="col text-center">
                                    <div class="player mt-2 pt-3" :class="formations.gk ? 'sel' : 'unselected'">
                                    
                                    <div class="player-img">
                                        <span class="remove-player" v-if="formations.gk" @click="formations.gk = ''">
                                            <i class="fa fa-times"></i>
                                        </span> 
                                    <img src="/assets/img/image.png" class="img-fluid" alt="player icon" style="width:70px; height:70px" @click="showPlayers('gk')">
                                    </div>
                                    <div class="player-info my-1">
                                    <h6>{{  formations.gk ? formations.gk.name : 'Name' }}</h6>
                                    </div>
                                    <h6 class="player-team">{{  formations.gk ? formations.gk.team : 'none' }}</h6>
                                    <!-- <div class="player-point">  
                                    <h6> 0</h6>
                                    </div> -->



                                    </div>
                                </div>
                            </div>
                            <div class="row player-row">
                                <div class="col text-center pos" v-for="(number, index) in formations.defender.amount" :key="number.id">
                                    
                                    <div class="player mt-2 pt-3"  :class="formations.defender.players[index] ? 'sel' : 'unselected'">
                                    <div class="player-img">
                                    <span class="remove-player" v-if="formations.defender.players[index]" @click="removePlayer(index, 'def')">
                                        <i class="fa fa-times"></i>
                                    </span>
                                    <img src="/assets/img/image.png" class="img-fluid" alt="player icon" style="width:70px; height:70px" @click="showPlayers('def')">
                                    </div>
                                    <div class="player-info my-1">
                                    <h6>{{ formations.defender.players[index] ? formations.defender.players[index].name : 'name'  }}</h6>
                                    </div>
                                    <div class="player-team">{{ formations.defender.players[index] ? formations.defender.players[index].team : 'none' }}</div>
                                    <!-- <div class="player-point">
                                        <h6> 0</h6>
                                    </div> -->
                                        
                                    </div>
                                </div>
                            </div>

                            <div class="row player-row">
                                <div class="col text-center pos" v-for="(number, index) in formations.midfielders.amount" :key="number.id">
                                    <div class="player mt-2 pt-3" :class="formations.midfielders.players[index] ? 'sel' : 'unselected'">
                                    <div class="player-img">
                                    <span class="remove-player" v-if="formations.midfielders.players[index]" @click="removePlayer(index, 'mid')">
                                        <i class="fa fa-times"></i>
                                    </span>
                                    <img src="/assets/img/image.png" class="img-fluid" alt="player icon" style="width:70px; height:70px" @click="showPlayers('mid')">
                                    </div>
                                    <div class="player-info my-1">
                                    <h6> {{ formations.midfielders.players[index] ? formations.midfielders.players[index].name : 'name'  }}</h6>
                                    <!-- <h6> {{ formations.midfielders.players[index] ? formations.midfielders.players[index].name : 'name'  }}</h6> -->
                                    </div>
                                    <div class="player-team">{{ formations.midfielders.players[index] ? formations.midfielders.players[index].team : 'none' }}</div>
                                    <!-- <div class="player-point">
                                    <h6> 0</h6>
                                    </div> -->

                                    </div>
                                </div>
                            </div>

                            <div class="row player-row">
                                <div class="col text-center pos" v-for="(number, index) in formations.attackers.amount" :key="number.id">
                                    <div class="player mt-2 pt-3" :class="formations.attackers.players[index] ? 'sel' : 'unselected'">
                                    <div class="player-img">
                                    <span class="remove-player" v-if="formations.attackers.players[index]" @click="removePlayer(index, 'fwd')">
                                        <i class="fa fa-times"></i>
                                    </span>
                                    <img src="/assets/img/image.png" class="img-fluid" alt="player icon" style="width:70px; height:70px" @click="showPlayers('fwd')">
                                    </div>
                                    <div class="player-info my-1">
                                    <h6> {{ formations.attackers.players[index] ? formations.attackers.players[index].name : 'name'  }}</h6>
                                    <!-- <div class="player-team">{{ formations.attackers.players[index] ? formations.attackers.players[index].team : 'none' }}</div> -->
                                    </div>
                                    <div class="player-team">{{ formations.attackers.players[index] ? formations.attackers.players[index].team : 'none' }}</div>
                                    <!-- <div class="player-point">
                                    <h6> 0</h6>
                                    </div> -->

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <Footer/>
    </div>
</template>
<script>
// import axios from 'axios'
import Navbar from '../components/Navbar.vue'
import PlayerSelectBar from '../components/PlayerSelectBar.vue'
import Footer from '../components/Footer.vue'
export default {
    name :'PickTeam',
    components:{
        Navbar, Footer,PlayerSelectBar
    },
    data(){
        return{
            players : [],   
            formations : {
                gk: null,
                attackers : {
                    players: [],
                    amount: null
                },
                midfielders : {
                    players: [],
                    amount: null
                },
                defender : {
                    players: [],
                    amount: null
                },
                disabled : false
            },
            error : null,
            buildField : false,
            show : true,
            playerError: "",
            search: "",
            selectedPosition: 'all',
            unselectedplayers : [],
            selectedPlayers: {
                gk: null,
                attackers : {
                    players: [],
                },
                midfielders : {
                    players: [],
                },
                defender : {
                    players: [],
                },
            }
        }
    },
    mounted(){
        this.getPlayers()
    },
    created(){
        setTimeout(() => {
            this.unselectedplayers = this.players;
        }, 1000)
    },
    methods:{
        getPlayers(){
            // axios.get("http://127.0.0.1:8000/api/listallplayers/")
            // .then(response=>{
                
                
            //     console.log(this.players)
            // })
            // this.players = [
            //         { id: 1234, firstname: "Jack", lastname: "Mick", position: "def", number: 2, team: 'CSC' },
            //         { id: 1235, firstname: "Drey", lastname: "Gut", position: "mid", number: 3, team: 'SOS' },
            //         { id: 1236, firstname: "FIlla", lastname: "Brow", position: "fwd", number: 5, team: 'Mech' },
            //         { id: 1237, firstname: "Moore", lastname: "Kiefer", position: "gk", number: 6, team: 'CSC' },
            //         { id: 1238, firstname: "Drake", lastname: "Pop", position: "def", number: 19, team: 'CAS' },
            //         { id: 1344, firstname: "pack", lastname: "Dirk", position: "def", number: 2, team: 'CSC' },
            //         { id: 1354, firstname: "Drey", lastname: "Drof", position: "mid", number: 3, team: 'SOS' },
            //         { id: 1435, firstname: "Fatil", lastname: "Jones", position: "fwd", number: 5, team: 'Mech' },
            //         { id: 1255, firstname: "Frogh", lastname: "Jam", position: "gk", number: 6, team: 'CSC' },
            //         { id: 1664, firstname: "Pat", lastname: "Dump", position: "def", number: 19, team: 'CAS' },
            //         { id: 1664, firstname: "Mat", lastname: "Sand", position: "mid", number: 19, team: 'CSC' },
            //         { id: 1664, firstname: "Jack", lastname: "Walter", position: "fwd", number: 19, team: 'CSC' },
            //     ]
        },
        generateFormation(){
            if(this.formations.defender.amount != null && this.formations.midfielders.amount != null && this.formations.attackers.amount != null){

                if(isNaN(this.formations.defender.amount) || isNaN(this.formations.midfielders.amount) || isNaN(this.formations.attackers.amount)){
                    this.error = "Only Input Numbers"
                    console.log("Only input Numbers")
                }else{
                    
                        if(this.formations.defender.amount <1 || this.formations.midfielders.amount < 1 || this.formations.attackers.amount <1){
                            this.error = "Input field cannot be a negative number"
                            console.log("canot be a negative number")
                        }
                        else{
                            const TotalNumber = this.formations.defender.amount + this.formations.midfielders.amount + this.formations.attackers.amount
                            console.log(TotalNumber)
                            if( TotalNumber > 10 || TotalNumber < 10){
                                this.error = "Formation should sum up to 10"
                            console.log("Formation cannot exceed 10")
                            }else{
                                if(this.formations.defender.amount > 5 || this.formations.midfielders.amount > 5 || this.formations.attackers.amount > 5){
                                    this.error = "Cannot be more than 5 players on a particular row"
                                }
                                else{
                                    setTimeout(function(){
                                        // Loading Spinner goes here
                                    }, 1000)
                                    this.buildField = true
                                    this.formations.disabled = true
                                }
                            }
                        }
                }
            }else{
                this.error = "Please Input some value"
                console.log("Please input some value in the area")
            }
            if(this.error) {
                setTimeout(() => {this.error = ""}, 5000)
            }
        },
        editFormation(){
            this.buildField = false
            this.formations.disabled = false
        },
        closeError(){
            this.error = null
        },
        showPlayers(position){
            // this.players.forEach(player => {
            //     console.log(player.position)
            // })
            if(position === 'all') return this.unselectedplayers = this.players;
            const result = this.players.filter(player => {
                return player.position == position;
            })
            if(position === 'gk') this.selectedPosition = "gk"
            if(position === 'def') this.selectedPosition = 'def'
            if(position === 'mid') this.selectedPosition = 'mid'
            if(position === 'fwd') this.selectedPosition = 'fwd'
            this.unselectedplayers = result;
        },
        selectPlayer(player) {
            if(this.selectedPlayers.defender.players.includes(player) || this.selectedPlayers.midfielders.players.includes(player) || this.selectedPlayers.attackers.players.includes(player) 
                || this.selectedPlayers.gk == player){
                this.playerError = "Player Already Included in Your Team!"
                setTimeout(() => {
                    this.playerError = ""
                }, 3000)
                return
            }
            if(player.position === 'gk') {
                this.formations.gk = { name: player.lastname, team: player.team }
                this.selectedPlayers.gk = player;
            } 
            
            if(player.position === 'def') {
                if(this.formations.defender.players.length === this.formations.defender.amount){
                    return this.playerError = "Max amount of players for defender position already selected";
                }
                this.formations.defender.players.push({ name: player.lastname, team: player.team })
                this.selectedPlayers.defender.players.push(player)
            }

            if(player.position === 'mid') {
                if(this.formations.midfielders.players.length === this.formations.midfielders.amount){
                    return this.playerError = "Max amount of players for midfield position already selected";
                }
                this.formations.midfielders.players.push({ name: player.lastname, team: player.team })
                this.selectedPlayers.midfielders.players.push(player)
            }

            if(player.position === 'fwd') {
                if(this.formations.attackers.players.length === this.formations.attackers.amount){
                    return this.playerError = "Max amount of players for forward position already selected";
                }
                this.formations.attackers.players.push({ name: player.lastname, team: player.team })
                this.selectedPlayers.attackers.players.push(player)
            }
        },
        removePlayer(index, position) {
            if(position === 'def') {
                this.formations.defender.players.splice(index, 1)
                this.selectedPlayers.defender.players.splice(index, 1)
                
            }

            if(position === 'mid') {
                this.formations.midfielders.players.splice(index, 1)
                this.selectedPlayers.midfielders.players.splice(index, 1)
            }

            if(position === 'fwd') {
                this.formations.attackers.players.splice(index, 1)
                this.selectedPlayers.attackers.players.splice(index, 1)
            }
        },
        searchPlayers() {
            if(!this.search) {
                const result = this.players.filter(player => {
                    return player.position == this.selectedPosition;
                })
                this.unselectedplayers = result
            } else {
                this.unselectedplayers = this.unselectedplayers.filter(player => player.firstname.toLowerCase().includes(this.search.toLowerCase()))
            }
        }
    
    },

}
</script>
<style scoped lang=scss>
.field{
    background-image: url(https://i.pinimg.com/originals/d7/b0/55/d7b05539aac8c5416c73ca046f977742.jpg);
    height: 900px;
    width: 100%;
    background-position: initial;
    background-size: cover;
    background-repeat: no-repeat;
}
@media (max-width:900px){
    .field{
        background-position: center;
    }
}
.submit-formation{
    background-color: #05d88e;
}
.error-message{
    justify-content: center;
    

    .close-message{
        float: right;
        margin-top: -30px;
        cursor: pointer;
        font-size: 22px;
        color: #05d88e;
    }


}
.player{
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 5px;
            flex-direction: column;
            /* background-color: #fff; */
            color: black;

            .player-img{
                cursor: pointer;
            }
            .player-info{
                background-color: #16b37c;
                padding: 2px;
                /* padding-bottom: -10px; */
                width: 100px;
                text-align: center;
                color: #fff;
                cursor: pointer;
                border-radius: 3px;
                h6{
                    font-size: 13px;
                    text-transform: capitalize;
                    /* font-weight: bold; */
                    font-family: 'Roboto';
                }
                
            }
            .player-point{
                background-color: #16b37c;
                padding:  8px 20px;
                color: white;
                text-align: center;
                border-radius: 50px;

                h6{
                    font-size: 12px;
                }
            }
        }
        .hidden-appear-text{
            border: 1px solid #05d88e;
            padding: 10px;
        }
        .submit-team-button{
            &:hover{
                background-color: #16b37c !important;
            }
        }
@media (max-width: 900px){
    .player{
        .player-info{
            padding : 0;
            margin: 0;  


        }
    }
    .error-message{
        p{
            font-size: 15px;
        }
    }
}
@media (max-width: 400px){
    /* .player{
        .player-img{
            width: 20px;
            height: 20px;
        }
    
    } */

    .player-row {
        width: 100%;
    }

    .player-row img {
        width: 2px;
    }
}

.player-select-holder {
    box-shadow: 0 0 6px 0 #ccc;
    height: 300px;
    overflow: auto;
    text-align: left;
    font-family: 'Roboto';
}

.player-select-holder > div {
    border-bottom: 1px solid #f3f3f3;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    font-family: 'Roboto';
    text-transform: capitalize;
    cursor: pointer;
}

.player-select-holder .fa-plus {
    padding: 5px;
    cursor: pointer;
    border-radius: 100%;
}

.player-select-holder .fa-plus:hover {
    background-color: #569424;
    color: #fff;
    
}

.remove-player {
    position: absolute;
    right: -5px;
    color: #fff;
    top: -10px;
    width: 20px;
    border: 2px solid #ad0d02;
    background: #990a00;
    padding: 3px;
    z-index: 1;
}

.player-img {
    position: relative;
}

.position-holder {
    background-color: #569424;
    color: #fff;
    text-transform: capitalize;
    position: sticky;
    top: 0;
    font-family: 'Roboto';
    left: 0;
}

.position-holder b {
    text-transform: uppercase;
    font-family: inherit;
    margin-right: 10px;
}

.unselected {
    opacity: 0.5;
}

.row {
    padding-bottom: 80px;
}

.select-form input {
    margin-right: 5px;
}

input[type="submit"] {
    color: #fff;
    font-weight: bold;
}

.search-form {
    border: none;
    border-bottom: 1px solid #ccc;
    border-radius: 0;
}

.error-message {
    cursor: pointer;
}

.select-position {
    background: transparent;
    border: none;
    border-bottom: 2px solid #fff;
    color: #fff;
    outline: none;
    padding: 0 30px 0 0;
}

.select-position option {
    color: #000;
    font-size: 15x;
    cursor: pointer;
}

.picked {
    opacity: 0.5;
    pointer-events: none;
}

.unpicked {
    opacity: 1;
}

.player-team {
    padding: 0;
    margin: -4px;
    font-size: 13px;
    color: #fff;
    background-color: #35572aa6;
    padding: 2px;
    font-family: 'Roboto';
    border-radius: 5px;
    /* width: 100%; */
}

.player-row {
    width: 80%;
    margin: 0 auto;
}

</style>